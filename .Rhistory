plot <- ggplot(data = data1, aes(y = reorder(Skills, Level),
x = Level, fill = Level)) +
geom_col() +
theme_minimal() +
labs(y = "", x = "", caption = "This graph was created using ggplot2") +
theme(
plot.background = element_rect(fill = "#2A2D32"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(color = "white"),
axis.text = element_text(color = "white", size = 12)
) +
scale_x_continuous(labels = function(x) paste0(x*100, "%"))
show(plot)
#install.packages("tidyverse")
#library("tidyverse")
Skills <- c("Excel", "MySQL, PostgreSQL", "R, Python", "Tableau, Power BI")
Level <- c(0.95, 0.75, 0.7, 0.4)
data1 <- data.frame(Skills, Level)
plot <- ggplot(data = data1, aes(y = reorder(Skills, Level),
x = Level, fill = Level)) +
geom_col() +
theme_minimal() +
labs(y = "Skill", x = "", caption = "This graph was created using ggplot2") +
theme(
plot.background = element_rect(fill = "#2A2D32"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(color = "white"),
axis.text = element_text(color = "white", size = 12),
plot.caption = element_text(hjust = 0, margin = margin(t = 10, l = 0, r = 0, b = 0))
) +
scale_x_continuous(labels = function(x) paste0(x*100, "%"))
show(plot)
#install.packages("tidyverse")
#library("tidyverse")
Skills <- c("Excel", "MySQL, PostgreSQL", "R, Python", "Tableau, Power BI")
Level <- c(0.95, 0.75, 0.7, 0.4)
data1 <- data.frame(Skills, Level)
plot <- ggplot(data = data1, aes(y = reorder(Skills, Level),
x = Level, fill = Level)) +
geom_col() +
theme_minimal() +
labs(y = "", x = "", caption = "This graph was created using ggplot2") +
theme(
plot.background = element_rect(fill = "#2A2D32"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(color = "white"),
axis.text = element_text(color = "white", size = 12),
plot.caption = element_text(hjust = 0, margin = margin(t = 10, l = 0, r = 0, b = 0))
) +
scale_x_continuous(labels = function(x) paste0(x*100, "%"))
show(plot)
#install.packages("tidyverse")
#install.packages("sqldf")
#install.packages("sf")
#install.packages("mapview")
#install.packages("leaflet")
setwd("G:/My Drive/Documentos personales/Proyectos/Independent Research/Tourism")
library(tidyverse)
library(sqldf)
library(sf)
library(leaflet)
library(htmlwidgets)
library(htmltools)
library(rworldmap)
Interes_turistico <- c(0.3,0.27,0.15,0.09,0.046,0.009,0.003,0.001)
Tipo_de_turismo  <- c("Actividades","Natural","Sol y Playa", "Cultural", "Gastronomia", "Bienestar", "Compras", "Ocio noncturno")
Indice_de_Satisfaccion <- c(0.61,0.55,0.61,0.58,0.65,0.64,0.64,0.51)
total_demand <- data.frame(Interes_turistico, Tipo_de_turismo, Indice_de_Satisfaccion)
rm(list= c("Interes_turistico", "Tipo_de_turismo", "Indice_de_Satisfaccion") )
Top10_destinos <- c("Jacó", "Tamarindo", "Manuel Antonio", "Playas del Coco","Santa Teresa","Playa Hermosa","Herradura","La Fortuna de San Carlos","Puerto Viejo de Talamanca", "San José", 'Siquirres')
latitude <- c(9.612427,10.299580,9.407558,10.552834,9.645324,10.569370,9.656437,10.469265,9.653321,9.935977, 10.099959)
longitude <- c( -84.627814,-85.834293,-84.150426,-85.692656,-85.163441,-85.679113 ,-84.666192,-84.641118,-82.756459,-84.104097,-83.507581)
Locations <- data.frame(Top10_destinos,longitude,latitude)
Locations <- sqldf("SELECT Top10_destinos,longitude, latitude,
CASE WHEN Top10_destinos <> 'Siquirres' THEN 'Hot Destination'
ELSE 'Emerging Destination'
END col_labels from Locations")
## Geolocation Data
Locations_sf <- st_as_sf(Locations, coords = c("longitude", "latitude"),  crs = 4326)
pallet <-colorFactor(c("yellow", "red"), domain = Locations_sf$col_labels)
icon_parameters <-icons(iconWidth = 38, iconHeight = 95 )
Mapa_de_destinos2 <- leaflet(Locations_sf) %>%
addTiles() %>%
addCircleMarkers(lng = ~longitude,
lat = ~latitude,
clusterOptions = markerClusterOptions(),
radius = ~ifelse(col_labels == 'Hot Destination', 8, 15),
color = ~pallet(col_labels),
stroke = FALSE,
fillOpacity = 0.6,
label= ~htmlEscape(Top10_destinos),
popup= ~htmlEscape(Top10_destinos)
) %>%  addLegend(pal = pallet,
values = ~col_labels, opacity = 1,
title = "Tourist Interest")
show(Mapa_de_destinos2)
#saveWidget(Mapa_de_destinos2, file="Mapa_de_destinos2.html")
getwd()
#Set the working directory to the folder in which you have the data available
setwd("C:\Users\Dell Latitud E7450\Desktop\UberTest")
#Set the working directory to the folder in which you have the data available
setwd("C:/Users/Dell Latitud E7450/Desktop/UberTest")
getwd()
base_data_set <- read.csv("Data Set - Territory Analyst, Uber Eats CenAm")
source("C:/Users/Dell Latitud E7450/Desktop/UberTest/UberAnalysis.R", echo=TRUE)
View(base_data_set)
type(base_data_set[1])
#Exploratory analysis
typeof(base_data_set[1])
#Exploratory analysis
base_data_set[1]
#Exploratory analysis
base_data_set[1] %>% separate_wider_delim(x, " ", names = c("date", "time"))
#Exploratory analysis
base_data_set[1] %>% separate_wider_delim(" ", names = c("date", "time"))
#Exploratory analysis
base_data_set[1] %>% separate_wider_delim(., " ", names = c("date", "time"))
#Exploratory analysis
base_data_set[1] %>% separate_wider_delim(.~ , " ", names = c("date", "time"))
#Exploratory analysis
type(base_data_set[1][1]) #%>% separate_wider_delim(, " ", names = c("date", "time"))
#Exploratory analysis
typeof(base_data_set[1][1]) #%>% separate_wider_delim(, " ", names = c("date", "time"))
#Wrangling
type(base_data_set[[1]][1])
#Wrangling
typeof(base_data_set[[1]][1])
#Wrangling
as.Date(base_data_set[1])
#Wrangling
base_data_set[1] %>% separate(Name, c('Date', 'Time'))
#Wrangling
base_data_set %>% separate(base_data_set[1], c('Date', 'Time'))
#Wrangling
base_data_set[1] %>% separate(base_data_set[1], c('Date', 'Time'))
#Wrangling
base_data_set[1]
#Change the working directory to the folder in which you have the data.
setwd("C:/Users/Dell Latitud E7450/Desktop/UberTest")
source("C:/Users/Dell Latitud E7450/Desktop/UberTest/UberAnalysis.R", echo=TRUE)
install.packages("tidyverse")
source("C:/Users/Dell Latitud E7450/Desktop/UberTest/UberAnalysis.R", echo=TRUE)
#Wrangling
base_data_set[1] %>% separate(base_data_set[1], c('Date', 'Time'))
#Wrangling
base_data_set[1] %>% separate(base_data_set[1], c('Date', 'Time'), sep = " ")
#Wrangling
base_data_set[1] %>% separate( c('Date', 'Time'), sep = " ")
#Wrangling
base_data_set[1] %>% separate(, c('Date', 'Time'), sep = " ")
#Wrangling
base_data_set %>% separate(col = base_data_set[1], c('Date', 'Time'), sep = " ")
#Wrangling
base_data_set %>% separate(col = unlist(base_data_set[1]), c('Date', 'Time'), sep = " ")
#Wrangling
base_data_set %>% separate(unlist(base_data_set[1]), c('Date', 'Time'), sep = " ")
#Wrangling
base_data_set[1] %>% separate(., c('Date', 'Time'), sep = " ")
separate(base_data_set, base_data_set[1], into = c("col1", "col2"), sep = " ")
print(separate(base_data_set, date, into = c("col1", "col2"), sep = " "))
colnames(base_data_set)[1] <- "date"
#Wrangling
#base_data_set[1] %>% separate(., c('Date', 'Time'), sep = " ")
print(separate(base_data_set, date, into = c("col1", "col2"), sep = " "))
View(base_data_set)
base_data_set %>% separate(. , date, into = c("date", "time"), sep = " ")
View(base_data_set)
base_data_set <- base_data_set %>% separate(. , date, into = c("date", "time"), sep = " ")
base_data_set[!complete.cases(base_data_set), ]
base_data_set[complete.cases(base_data_set), ]
testing <- base_data_set[complete.cases(base_data_set), ]
base_data_set <- base_data_set %>% separate(. , date, into = c("date", "time"), sep = " ") %>% na.omit()
testing <- base_data_set[complete.cases(base_data_set), ]
base_data_set <- base_data_set %>% separate(. , date, into = c("date", "time"), sep = " ") %>% na.omit(.)
base_data_set <- base_data_set %>% separate(. , date, into = c("date", "time"), sep = " ") %>% na.omit(.)
testing <- base_data_set[complete.cases(base_data_set), ]
base_data_set <- base_data_set %>% separate(. , date, into = c("date", "time"), sep = " ")
base_data_set <- base_data_set %>% separate(. , date, into = c("date", "time"), sep = " ")
testing <- base_data_set[complete.cases(base_data_set), ]
base_data_set <- read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv")
#Cleaning
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>% separate(. , date, into = c("date", "time"), sep = " ") %>% na.omit(.)
testing <- base_data_set[complete.cases(base_data_set), ]
#install.packages("tidyverse")
#install.packages("sqldf")
#library(tidyverse)
#library(sqldf)
#Change the working directory to the folder in which you have the data.
setwd("C:/Users/Dell Latitud E7450/Desktop/UberTest")
base_data_set <- read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv")
#Cleaning
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.)
rm(testing)
#install.packages("tidyverse")
#install.packages("sqldf")
#library(tidyverse)
#library(sqldf)
#Change the working directory to the folder in which you have the data.
setwd("C:/Users/Dell Latitud E7450/Desktop/UberTest")
base_data_set <- read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv")
#Cleaning
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.)
View(base_data_set)
avg_basket_by_order <- sqldf("SELECT order_id, avg(basket) FROM base_date_set
GROUP BY order_id")
avg_basket_by_order <- sqldf("SELECT order_id, avg(basket) FROM base_data_set
GROUP BY order_id")
View(avg_basket_by_order)
avg_basket_by_order <- sqldf("SELECT order_id, avg(basket) as average_basket FROM base_data_set
GROUP BY order_id
WHERE average_basket > 0
SORT BY average_basket")
avg_basket_by_order <- sqldf("SELECT order_id, avg(basket) as average_basket FROM base_data_set
GROUP BY order_id
WHERE basket > 0
SORT BY average_basket")
avg_basket_by_order <- sqldf("SELECT order_id, avg(basket) as average_basket FROM base_data_set
WHERE basket > 0
GROUP BY order_id
SORT BY average_basket")
avg_basket_by_order <- sqldf("SELECT order_id, avg(basket) as average_basket FROM base_data_set
WHERE basket > 0
GROUP BY order_id
ORDER BY average_basket DESC")
View(avg_basket_by_order)
avg_basket_by_order <- sqldf("SELECT order_id, avg(basket) as average_basket FROM base_data_set
WHERE basket > 0
GROUP BY order_id
")
avg_basket_by_order <- sqldf("SELECT order_id, avg(basket) as average_basket FROM base_data_set
WHERE average_basket > 0
GROUP BY order_id
")
avg_basket_by_order <- sqldf("SELECT order_id, avg(basket) as average_basket FROM base_data_set
WHERE basket > 0
GROUP BY order_id
")
avg_basket_by_order <- sqldf("SELECT order_id, avg(basket) as average_basket FROM base_data_set
GROUP BY order_id
")
View(avg_basket_by_order)
typeof(base_data_set$basket)
as.currency(base_data_set$basket)
base_data_set <- read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv")
#Cleaning data
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
str_replace_all(., "$", "")
base_data_set <- read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv")
#Cleaning data
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.)
base_data_set <- read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv")
#Cleaning data
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
mutate_all(~str_replace_all(., "$", ""))
View(avg_basket_by_order)
View(base_data_set)
View(base_data_set)
typeof(base_data_set)
base_data_set <- as.data.frame(read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv"))
#Cleaning data
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
mutate_all(~str_replace_all(., "$", ""))
View(base_data_set)
typeof(base_data_set)
base_data_set <- data_frame(read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv"))
#Cleaning data
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
mutate_all(~str_replace_all(., "$", ""))
typeof(base_data_set)
base_data_set <- data_frame(read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv"))
typeof(base_data_set)
base_data_set <- data.frame(read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv"))
typeof(base_data_set)
# Example list
my_list <- list(
Name = c("John", "Jane", "Alice"),
Age = c(25, 30, 35),
City = c("New York", "London", "Paris")
)
# Convert the list to a dataframe
df <- data.frame(my_list)
# View the resulting dataframe
print(df)
print(typeof(df))
df <- data.frame(my_list)
# Convert the list to a dataframe
df <- data.frame(my_list)
# View the resulting dataframe
print(typeof(df))
# Example list
my_list <- list(
Name = c("John", "Jane", "Alice"),
Age = c(25, 30, 35),
City = c("New York", "London", "Paris")
)
# Convert the list to a dataframe
rm(my_list)
# View the resulting dataframe
# Convert the list to a dataframe
rm(df)
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
mutate_all(str_replace_all(., "$", ""))
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
mutate_all(~str_replace_all(., "$", " "))
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
mutate_all(~str_replace_all(., "$", " "))
View(base_data_set)
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
mutate_all(~str_replace_all(., "$", ""))
base_data_set <- data.frame(read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv"))
typeof(base_data_set)
#Cleaning data
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
mutate_all(~str_replace_all(., "$", ""))
View(base_data_set)
base_data_set <- data.frame(read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv"))
typeof(base_data_set)
#Cleaning data
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
mutate_at(vars(basket, total_eater_promos), ~str_replace_all(., "$", ""))
View(base_data_set)
typeof(base_data_set$basket)
my_currency <- currency(as.numeric(base_data_set$basket), format = "f", digits = 2, prefix = "$")
#install.packages("tidyverse")
#install.packages("sqldf")
install.packages("formattable")
#library(tidyverse)
#library(sqldf)
library(formattable)
my_currency <- currency(as.numeric(base_data_set$basket), format = "f", digits = 2, prefix = "$")
print(my_currency)
my_currency <- currency(parse_number(base_data_set$basket), format = "f", digits = 2, prefix = "$")
my_currency <- currency(parse_number(base_data_set$basket), format = "f", digits = 2, prefix = "$")
print(my_currency)
my_currency <- currency(parse_number(base_data_set$basket), format = "f", digits = 2)
print(my_currency)
my_currency <- currency(parse_number(base_data_set$basket), format = "f", digits = 2)
print(typeof(my_currency))
my_currency <- currency(parse_number(base_data_set$basket), format = "f", digits = 2)
print(sum(my_currency))
base_data_set <- data.frame(read.csv("Data Set - Territory Analyst, Uber Eats CenAm.csv"))
typeof(base_data_set)
#Cleaning data
colnames(base_data_set)[1] <- "date"
base_data_set <- base_data_set %>%
separate(. , date, into = c("date", "time"), sep = " ") %>%
na.omit(.) %>%
mutate_at(vars(basket, total_eater_promos), ~currency(parse_number(.), format = "f", digits = 2))
source("C:/Users/Dell Latitud E7450/Desktop/UberTest/UberAnalysis.R", echo=TRUE)
ggplot(data = base_data_set, aes(x = date, y = basket, col = cuisine))+
geom_point()+ geom_smooth(method = lm)
count(unique(base_data_set$user_id))
n_distinct(base_data_set$user_id)
avg_rev_by_user_top10 <- sqldf("SELECT user_id, cuisine, avg(basket - total_eater_promos) as rev FROM base_data_set
WHERE basket > 0
GROUP BY user_id
ORDER by rev DESC
")
View(avg_rev_by_user_top10)
avg_rev_by_user_top10 <- sqldf("SELECT user_id, cuisine, avg(basket - total_eater_promos) as rev FROM base_data_set
WHERE basket > 0
GROUP BY user_id
ORDER by rev DESC
Limit 10
")
View(avg_rev_by_user_top10)
avg_rev_by_user_top10 <- sqldf("SELECT user_id, cuisine, avg(basket - total_eater_promos) as rev FROM base_data_set
WHERE basket > 0
GROUP BY user_id, cuisine
ORDER by rev DESC
Limit 10
")
View(avg_rev_by_user_top10)
avg_rev_by_user_top10 <- sqldf("SELECT user_id, cuisine, avg(basket - total_eater_promos) as rev FROM base_data_set
WHERE basket > 0
GROUP BY user_id
ORDER by rev DESC
Limit 10
")
avg_rev_by_user_top10 <- sqldf("SELECT user_id, avg(basket - total_eater_promos) as rev FROM base_data_set
WHERE basket > 0
GROUP BY user_id
ORDER by rev DESC
Limit 10
")
ggplot(data = base_data_set, aes(x = time, y = basket, col = cuisine))+
geom_point()+ geom_smooth(method = lm)
ggplot(data = base_data_set, aes(x = time, y = order_id))+
geom_point()+ geom_smooth(method = lm)
ggplot(data = base_data_set, aes(x = time, y = order_id))+
geom_smooth(method = lm)
ggplot(data = base_data_set, aes(x = time, y = cuisine))+
geom_smooth(method = lm)
ggplot(data = base_data_set, aes(x = basket, y = cuisine))+
geom_col()
ggplot(data = base_data_set, aes(x = cuisine, y = basket, col = cuisine))+
geom_col()
ggplot(data = base_data_set, aes(x = cuisine, y = basket, fill = cuisine))+
geom_col()
ggplot(data = base_data_set, aes(x = cuisine, y = basket, fill = cuisine))+
geom_boxplot()
View(avg_basket_by_cuisine)
View(avg_rev_by_cuisine)
#install the packages if necessary
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("sqldf")) install.packages("sqldf")
if(!require("formattable")) install.packages("formattable")
#Which cuisine drive the most revenue
ggplot(data = base_data_set, aes(x = cuisine, y = (basket - total_eater_promos), fill = cuisine))+
geom_boxplot()
path <- "PNM_supermercados_2007-2023.xlsx"
mad <- path %>%
excel_sheets() %>%
set_names() %>%
map(read_excel,
path = path)
path <- "PNM_supermercados_2007-2023.xlsx"
mad <- path %>%
readxl::excel_sheets() %>%
set_names() %>%
map(read_excel,
path = path)
library(readxl)
path <- "PNM_supermercados_2007-2023.xlsx"
mad <- path %>%
readxl::excel_sheets() %>%
set_names() %>%
map(read_excel,
path = path)
View(mad)
View(mad[["GRANOS"]])
path <- "PNM_supermercados_2007-2023.xlsx"
mad <- path %>%
excel_sheets() %>%
set_names() %>%
map(read_excel,
path = path)
unlisted <- unlist(mad, recursive = FALSE)
list2env(unlisted, envir = .GlobalEnv)
source("C:/Users/Dell Latitud E7450/Desktop/UberTest/UberAnalysis.R", echo=TRUE)
print(mad$ABARROTES)
sqldf("SELECT * FROM mad$CARNICOS")
colnames(mad)
names(mad)
lapply(mad, as.data.frame)
for (i in 1:length(sub_list)){
sublist_name <- names(sub_list)[i]
assign(sublist_name, sub_list[[i]])
}
sub_list<- lapply(mad, as.data.frame)
for (i in 1:length(sub_list)){
sublist_name <- names(sub_list)[i]
assign(sublist_name, sub_list[[i]])
}
source("C:/Users/Dell Latitud E7450/Desktop/UberTest/UberAnalysis.R", echo=TRUE)
View(ABARROTES)
names(ABARROTES)
names(GRANOS)
sqldf("SELECT Fecha/Producto, Atún - Lata 140 g, Arroz 90-10% FROM
ABARROTES
FULL OUTER JOIN GRANOS
USING Fecha/Producto")
sqldf("SELECT Fecha/Producto, Café 500grm, Arroz 90-10% FROM
ABARROTES
FULL OUTER JOIN GRANOS
USING Fecha/Producto")
colnames(ABARROTES)
